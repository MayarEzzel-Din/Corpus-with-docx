using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;
using Microsoft.Office.Interop.Word;
using SautinSoft.Document;
using System.Text.RegularExpressions;
using GemBox.Document;
namespace corpus
{
    public partial class Form1 : Form
    {
        string name = "";
        string path = "";
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            dataGridView1.Rows.Clear();
            // Bring Your Previous Search from XML File
            XmlDocument doc = new XmlDocument();
            if (File.Exists("novels.xml"))
            {
                doc.Load("novels.xml");
                XmlNodeList list = doc.GetElementsByTagName("Novel");
                for (int i = 0; i < list.Count; i++)
                {
                    XmlNodeList children = list[i].ChildNodes;
                    string p = children[0].Name;
                    string pValue = children[0].InnerText;
                    string n = children[1].Name;
                    string nValue = children[1].InnerText;

                    if (dataGridView1.ColumnCount == 0)
                    {
                        dataGridView1.Columns.Add("Path", pValue);
                        dataGridView1.Columns.Add("Name", nValue);
                    }
                    dataGridView1.Rows.Add(new string[] { nValue, pValue });
                }
            }
        }

        private void BrowseBTN_Click(object sender, EventArgs e)
        {
            ////READING From .DOCX File
            using (OpenFileDialog ofd = new OpenFileDialog() {ValidateNames = true, Multiselect = false, Filter = "word 97-2003|*,doc|word Document|*.docx"})
            {
                if(ofd.ShowDialog() == DialogResult.OK)
                {
                    object readOnly = false;
                    object visible = true;
                    object save = false;
                    object fileName = ofd.FileName;
                    object newTemplate = false;
                    object docType = 0;
                    object missing = Type.Missing;
                    Microsoft.Office.Interop.Word._Document document;
                    Microsoft.Office.Interop.Word._Application application = new Microsoft.Office.Interop.Word.Application() { Visible = false };
                    document = application.Documents.Open(ref fileName, ref missing, ref readOnly, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref visible, ref missing, ref missing, ref missing, ref missing);
                    document.ActiveWindow.Selection.WholeStory();
                    document.ActiveWindow.Selection.Copy();
                    IDataObject dataObject = Clipboard.GetDataObject();
                    RTF.Rtf = dataObject.GetData(DataFormats.Rtf).ToString();
                    application.Quit(ref missing, ref missing, ref missing);
                    path = fileName.ToString();
                    int x = path.Length - 6;
                    for(int i= x; i>=0; i--)
                    {
                        if(path[i] == '\\')
                        {
                            name = path.Substring(i+1, x-i);
                            break;
                        }
                    }
                    ///Save file in the prevoius search XML File
                    if(!File.Exists("novels.xml"))
                    {
                        XmlWriter writer = XmlWriter.Create("novels.xml");
                        writer.WriteStartDocument();
                        writer.WriteStartElement("Table");
                        writer.WriteAttributeString("name", "Novels");
                        writer.WriteStartElement("Novel");

                        writer.WriteStartElement("Path");
                        writer.WriteString(path);
                        writer.WriteEndElement();

                        writer.WriteStartElement("Name");
                        writer.WriteString(name);
                        writer.WriteEndElement();

                        writer.WriteEndElement();
                        writer.WriteEndElement();
                        writer.Close();
                    }
                    else
                    {
                        XmlDocument doc = new XmlDocument();
                        XmlElement novel = doc.CreateElement("Novel");
                        XmlElement node = doc.CreateElement("Path");
                        node.InnerText = path;
                        novel.AppendChild(node);

                        node = doc.CreateElement("Name");
                        node.InnerText = name;
                        novel.AppendChild(node);

                        doc.Load("novels.xml");
                        XmlElement root = doc.DocumentElement;
                        root.AppendChild(novel);
                        doc.Save("novels.xml");
                    }
                    dataGridView1.Rows.Add(new string[] { name, path });
                }
            }
        }

        private void dataGridView1_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            SearchTXT.Text = "";
            LineNumberTXT.Text = "";
            RepeatedTXT.Text = "";
            RTF.Text = "";
            LineTXT.Text = "";
            string P = dataGridView1.Rows[e.RowIndex].Cells[1].Value.ToString();

            object readOnly = false;
            object visible = true;
            object save = false;
            object fileName = P;
            object newTemplate = false;
            object docType = 0;
            object missing = Type.Missing;
            Microsoft.Office.Interop.Word._Document document;
            Microsoft.Office.Interop.Word._Application application = new Microsoft.Office.Interop.Word.Application() { Visible = false };
            document = application.Documents.Open(ref fileName, ref missing, ref readOnly, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref visible, ref missing, ref missing, ref missing, ref missing);
            document.ActiveWindow.Selection.WholeStory();
            document.ActiveWindow.Selection.Copy();
            IDataObject dataObject = Clipboard.GetDataObject();
            RTF.Rtf = dataObject.GetData(DataFormats.Rtf).ToString();
            application.Quit(ref missing, ref missing, ref missing);
            path = P;
        }
        /// Function take the .docx file content and return a list contains line by line
        private List<string> Lines(string content)
        {
            int StartIndex = 0, EndIndex = 0;
            List<string> lines = new List<string>();
            for (int i = 0; i < content.Length; i++)
            {
                if (content[i] == '\n' || i == content.Length - 1)
                {
                    if (i == content.Length - 1)
                        lines.Add(content.Substring(StartIndex, EndIndex - StartIndex + 2));
                    else
                        lines.Add(content.Substring(StartIndex, EndIndex - StartIndex + 1));
                    StartIndex = i + 1;
                    EndIndex = i + 1;
                }
                else if (content[i] != '\r')
                    EndIndex = i;
            }
            return lines;
        }
        private void SearchBTN_Click(object sender, EventArgs e)
        {
            LineNumberTXT.Text = "";
            LineTXT.Text = "";
            RepeatedTXT.Text = "";
            DocumentCore dc = DocumentCore.Load(path);
            Regex regex = new Regex(SearchTXT.Text);
            int count = dc.Content.Find(regex).Count();
            RepeatedTXT.Text = count.ToString();
            List<string> L = Lines(dc.Content.ToString());
            RTF.Text = "";
            for (int i=0; i<L.Count; i++)
            {
                RTF.Text += "\n\r" + L[i] + "\n\r";
                if (L[i].Contains(SearchTXT.Text))
                {
                    LineTXT.Text += "\n\r"+ L[i] + "\n\r";
                    LineNumberTXT.Text = LineNumberTXT.Text + "\n\r" + (i + 1).ToString() + "\n\r";                   
                }
            }
        }
            

        private void ResetBTN_Click(object sender, EventArgs e)
        {
            SearchTXT.Text = "";
            LineNumberTXT.Text = "";
            RepeatedTXT.Text = "";
            RTF.Text = "";
            LineTXT.Text = "";
        }


    }
}
